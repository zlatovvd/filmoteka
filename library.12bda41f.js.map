{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aCAAC,EAAAD,EAAA,SDQA,IAAIE,EAAS,KAETC,EAAc,UAElB,MAAMC,EAAU,IAAI,EAAAL,EAAAM,UACdC,EAAa,IAAI,EAAAC,EAAAC,YACjBC,EAAa,ICdZ,MAMLC,QAAQC,GAMN,OALAC,KAAKC,KAAOC,OAAOC,aAAaC,QAAQL,GACpCM,KAAKC,MAAMJ,OAAOC,aAAaC,QAAQL,IACvC,GACJC,KAAKO,WAAaC,KAAKC,KAAKT,KAAKC,KAAKS,OAASV,KAAKW,SAE7C,CACLC,OAAQZ,KAAKC,KAAKY,MAAMb,KAAKc,eAAgBd,KAAKe,cAClDR,WAAYP,KAAKO,WACjBI,QAASX,KAAKW,QACdK,YAAahB,KAAKiB,K,CAItBC,gBACElB,KAAKiB,MAAQ,C,CAGfE,gBACEnB,KAAKiB,MAAQ,C,CAGfG,QAAQH,GACNjB,KAAKiB,KAAOA,C,CAGdI,UACE,OAAOrB,KAAKiB,I,CAGdH,eACE,OAAOd,KAAKiB,KAAOjB,KAAKW,QAAUX,KAAKW,O,CAGzCI,aACE,IAAIA,EAAaf,KAAKc,eAAiBd,KAAKW,QAO5C,OANAW,QAAQC,IAAI,SAAUvB,KAAKC,KAAKS,QAE5BV,KAAKc,eAAiBd,KAAKW,QAAUX,KAAKC,KAAKS,SACjDK,EAAaf,KAAKC,KAAKS,QAGlBK,C,eA/CTS,EAAAnC,EAAA,CAAAW,KAAA,OAAO,IACPwB,EAAAnC,EAAA,CAAAW,KAAA,OAAO,GACPwB,EAAAnC,EAAA,CAAAW,KAAA,UAAU,GACVwB,EAAAnC,EAAA,CAAAW,KAAA,aAAa,E,GDYTyB,EAAO,CACXC,cAAeC,SAASC,cAAc,mBAEtCC,KAAMF,SAASC,cAAc,wBAC7BE,WAAYH,SAASC,cAAc,gBACnCG,eAAgBJ,SAASC,cAAc,qBAGzCH,EAAKM,eAAeC,iBAAiB,SA8CrC,SAA0BC,GACxBA,EAAMC,iBAEFD,EAAME,OAAOC,UAAUC,SAAS,qBAC9BJ,EAAME,OAAOC,UAAUC,SAAS,cAClCxC,EAAWqB,gBACFe,EAAME,OAAOC,UAAUC,SAAS,aACzCxC,EAAWsB,gBAEXtB,EAAWuB,QAAQkB,OAAOL,EAAME,OAAOI,YAGzCC,I,IAzDJf,EAAKI,KAAKG,iBAAiB,SAiC3B,SAAoBC,GAClBR,EAAKK,WAAWM,UAAUK,OAAO,UAE7BR,EAAME,OAAOC,UAAUC,SAAS,aAClC9C,EAAc,QACL0C,EAAME,OAAOC,UAAUC,SAAS,iBACzC9C,EAAc,WAEhBM,EAAWuB,QAAQ,GACnBoB,G,IAxCF,MAAMA,EAAcE,UAClB,IAAKpD,EACH,IACEA,QAAeE,EAAQmD,W,CACvB,MACArB,QAAQsB,MAAMA,M,CAGlB,MAAMhC,OAAEA,EAAML,WAAEA,EAAYI,QAAAkC,EAAO7B,YAAEA,GACnCnB,EAAWC,QAAQP,GACrBkC,EAAKC,cAAcoB,UAAYC,EAAanC,GAE5CU,QAAQC,IAAI,QAAShB,GAGnBkB,EAAKM,eAAee,UADlBvC,EAAa,EACiBb,EAAWsD,gBACzChC,EACA6B,EACAtC,GAG8B,EAAE,EAsCtC,MAAMwC,EAAe9C,GACZA,EACJgD,KACCC,IACE,6CAAuCA,EAAKC,+JAI1CD,EAAKE,qBACGF,EAAKG,iGAGmBH,EAAKI,MAAMC,oEA9C9BC,EAgDTN,EAAKM,UA/CVA,EACJP,KAAIC,GAAQ5D,EAAOmE,MAAKC,GAAUA,EAAOP,IAAMD,IAAMS,OACrDC,KAAK,WA8CS,IAAIC,KAAKX,EAAKY,cAAcC,qCAjDxB,IAAAP,CAkDP,IAEXI,KAAK,IAGVpB","sources":["src/library.js","src/StorageApi.js"],"sourcesContent":["'use strict';\n\nimport { movieApi } from './movieApi';\nimport { Pagination } from './Pagination';\nimport { StorageApi } from './StorageApi';\n\nconst postersPath = 'https://image.tmdb.org/t/p/w500';\n\nlet genres = null;\nlet perPage = 4;\nlet storageName = 'watched';\n\nconst dataApi = new movieApi();\nconst pagination = new Pagination();\nconst storageApi = new StorageApi();\n\nconst refs = {\n  filmotekaList: document.querySelector('.filmoteka-list'),\n  //queueBtn: document.querySelector('.queue-btn'),\n  btns: document.querySelector('.library-btn-wrapper'),\n  watchedBtn: document.querySelector('.watched-btn'),\n  paginationList: document.querySelector('.pagination-list'),\n};\n\nrefs.paginationList.addEventListener('click', handlePagination);\nrefs.btns.addEventListener('click', handleBtns);\n\nconst loadLibrary = async () => {\n  if (!genres) {\n    try {\n      genres = await dataApi.loadGenre();\n    } catch {\n      console.error(error);\n    }\n  }\n  const { result, totalPages, perPage, currentPage } =\n    storageApi.getData(storageName);\n  refs.filmotekaList.innerHTML = createMarkup(result);\n\n  console.log('total', totalPages);\n\n  if (totalPages > 1) {\n    refs.paginationList.innerHTML = pagination.creatPagination(\n      currentPage,\n      perPage,\n      totalPages\n    );\n  } else {\n    refs.paginationList.innerHTML = '';\n  }\n};\n\nconst createGenreStr = genre_ids => {\n  return genre_ids\n    .map(item => genres.find(option => option.id == item).name)\n    .join(', ');\n};\n\nfunction handleBtns(event) {\n  refs.watchedBtn.classList.remove('active');\n\n  if (event.target.classList.contains('queue-btn')) {\n    storageName = 'queue';\n  } else if (event.target.classList.contains('watched-btn')) {\n    storageName = 'watched';\n  }\n  storageApi.setPage(1);\n  loadLibrary();\n}\n\nfunction handlePagination(event) {\n  event.preventDefault();\n\n  if (event.target.classList.contains('pagination-link')) {\n    if (event.target.classList.contains('page-right')) {\n      storageApi.incrementPage();\n    } else if (event.target.classList.contains('page-left')) {\n      storageApi.decrementPage();\n    } else {\n      storageApi.setPage(Number(event.target.innerText));\n    }\n\n    loadLibrary();\n  }\n}\n\nconst createMarkup = data => {\n  return data\n    .map(\n      item =>\n        `<li class=\"filmoteka-item\" data-id=\"${item.id}\">\n            <a href=\">\n              <div class=\"filmoteka-thumb\">\n                  <img class=\"filmoteka-img\" src=\"${postersPath}${\n          item.poster_path\n        }\" alt=\"${item.overview}\" />\n              </div>\n            </a>\n            <h2 class=\"filmoteka-title\">${item.title.toUpperCase()}</h2>\n            <p class=\"filmoteka-discription\">${createGenreStr(\n              item.genre_ids\n            )} | ${new Date(item.release_date).getFullYear()}</p>\n          </li>`\n    )\n    .join('');\n};\n\nloadLibrary();\n","export class StorageApi {\n  data = [];\n  page = 1;\n  perPage = 4;\n  totalPages = 1;\n\n  getData(storageName) {\n    this.data = window.localStorage.getItem(storageName)\n      ? JSON.parse(window.localStorage.getItem(storageName))\n      : [];\n    this.totalPages = Math.ceil(this.data.length / this.perPage);\n\n    return {\n      result: this.data.slice(this.startElement(), this.endElement()),\n      totalPages: this.totalPages,\n      perPage: this.perPage,\n      currentPage: this.page,\n    };\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  decrementPage() {\n    this.page -= 1;\n  }\n\n  setPage(page) {\n    this.page = page;\n  }\n\n  getPage() {\n    return this.page;\n  }\n\n  startElement() {\n    return this.page * this.perPage - this.perPage;\n  }\n\n  endElement() {\n    let endElement = this.startElement() + this.perPage;\n    console.log('length', this.data.length);\n\n    if (this.startElement() + this.perPage > this.data.length) {\n      endElement = this.data.length;\n    }\n\n    return endElement;\n  }\n}\n"],"names":["$4zW3v","parcelRequire","$iJYdK","$ce3726a01b8ab25a$var$genres","$ce3726a01b8ab25a$var$storageName","$ce3726a01b8ab25a$var$dataApi","movieApi","$ce3726a01b8ab25a$var$pagination","$9CxTh","Pagination","$ce3726a01b8ab25a$var$storageApi","getData","storageName","this","data","window","localStorage","getItem","JSON","parse","totalPages","Math","ceil","length","perPage","result","slice","startElement","endElement","currentPage","page","incrementPage","decrementPage","setPage","getPage","console","log","$parcel$interopDefault","$ce3726a01b8ab25a$var$refs","filmotekaList","document","querySelector","btns","watchedBtn","paginationList","addEventListener","event","preventDefault","target","classList","contains","Number","innerText","$ce3726a01b8ab25a$var$loadLibrary","remove","async","loadGenre","error","perPage1","innerHTML","$ce3726a01b8ab25a$var$createMarkup","creatPagination","map","item","id","poster_path","overview","title","toUpperCase","genre_ids","find","option","name","join","Date","release_date","getFullYear"],"version":3,"file":"library.12bda41f.js.map"}